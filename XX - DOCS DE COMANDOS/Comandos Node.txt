 INFORMAÇÕES
* NPM INIT = Comando usado no Node.js para iniciar o processo de criação de um novo projeto e gerar o arquivo package.json.
Ao executar o comando npm init, será solicitado fornecer informações sobre o projeto, como nome, versão, descrição, ponto de entrada do aplicativo, autor, licença, entre outros detalhes.

* O package-lock.json funciona para evitar que 2 desenvolvedores criem conflitos por estarem trabalhando simultaneamente.
    - basicamente faz que o ambiente de desenvolvimento fique uniforme

*** É IMPORTANTE QUE SEJA CRIADO UM ARQUIVO .GITIGNORE E ESCREVER DENTRO DELE NODE_MODULES PARA EVITAR QUE O GIT ENVIE TODA A BIBLIOTECA PARA O REPOSITÓRIO NO GIT HUB POR SER MUITO EXTENSO ***

*INICIO DA INSTALAÇÃO

npm init       --->        (cria o arquivo package.json) (escrever o nome do pacote)


ir apertando enter basicamente se não tiver as informações kkk | 

SE NÃO QUISER ESCREVER BASTA USAR O SEGUNITE COMANDO: npm init --yes 
ELE PULA AUTOMATICAMENTE TODAS AS INFORMAÇÕES

PARA INSTALAR UM PACOTE É PRECISO USAR O SEGUINTE COMANDO:

npm install --save-dev (nome do pacote, ex: gulp)

PARA INSTALAR UMA VERSÃO EM ESPECIFÍCO: npm install --save-dev gulp-sass@5.1.0 


**INSTALAÇÃO SASS

1. escrever no package.json 
"sass": "sass (nome da pasta desejada)/main.scss (arquivo de entrada, deve já estar criado) (nome da pasta desejada)/main.css -- watch",

2. npm i --save-dev sass para instalar os arquivos do node


**INSTALAÇÃO GULP

1. npm install --save-dev gulp gulp-sass

2. criar o arquivo gulpfile.js

3. escrever no package.json dentro de scripts: "build": "gulp",
					       "dev": "gulp watach",


				
***CONFIGURAÇÃO DO SASS DENTRO DO GULP

1. Abrir o gulpfile e digitar: 

const gulp = require('gulp');
const sass = require('gulp-sass')(require('sass'));  **PARA FUNCIONAR A COMPRESSÃO DOS ARQUIVOS CSS É NECESSÁRIO INSTALAR A VERSÃO 5.1.0 DO GULP-SASS

function styles () {
	return gulp.src('./src/styles/*.scss') 		  --- função para "recuperar" os arquivos para compilar (VERSÃO INICIAL PRÉ-COMPILAÇÃO)
		.pipe(sass({outputStyle: 'compressed' })) --- função para designar o estilo dos arquivos compilados para comprimidos 
		.pipe(gulp.dest('./dist/css');		  --- função para definir o destino dos arquivos compilados (VERSÃO FINAL)
}
	
exports.default = styles;
exports.watch = function() {
    gulp.watch('./src/styles/*.scss', gulp.parallel(styles))
}


**OPCIONAL 

INSTALAÇÃO DO COMPRESSOR DE IMAGENS DO GULP

1. O GULP DEVE ESTAR NA VERSÃO 4.0.2 PARA FUNCIONAR

2. npm i --save-dev gulp-imagemin@7.1.0

3. Dentro do gulpfile: 

function images(){
    return gulp.src('./src/images/**/*')
        .pipe(imagemin())
        .pipe(gulp.dest('./dist/images'))
}

**INSTALAÇÃO GULP-UGLIFY

INSTALAÇÃO DO COMPRESSOR DE JAVA SCRIPT

1. npm i --save-dev gulp-uglify

2. Dentro do gulpfile:

function scripts() {
    return gulp.src('./src/scripts/*.js')
        .pipe(uglify())
        .pipe(gulp.dest('./dist/js'))
}


**INSTALAÇÃO PARCEL

1. npm install --save-dev parcel@2.8.0 

2. Dentro do package.json na parte de Scripts: 

	"dev": "parcel src/index.html src/styles/main.scss src/scripts/main.js",
		parcel *localização arquivos e seus respectivos nomes que o parcel deve manejar*

*Não é necessário utilizar o Live Server do VSCode com o Parcel, o mesmo possui a função de "Hot-reload", que faz com que o navegador atualize com as alterações feitas no arquivo. 

**Basta acessar o link no terminal: http://localhost:1234

**MINIFICAÇÃO DE IMAGENS COM O PARCEL: 

	1. Criar um arquivo chamado sharp.config.json na mesma pasta que o package.json
